# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # https://symfony.com/doc/current/routing.html#generating-urls-in-commands
    'env(ROUTER_REQUEST_CONTEXT_SCHEME)': 'https'
    'env(ROUTER_REQUEST_CONTEXT_BASE_URL)': ''
    router.request_context.scheme: '%env(ROUTER_REQUEST_CONTEXT_SCHEME)%'
    router.request_context.host: '%env(ROUTER_REQUEST_CONTEXT_HOST)%'
    router.request_context.base_url: '%env(ROUTER_REQUEST_CONTEXT_BASE_URL)%'
    asset.request_context.base_path: '%router.request_context.base_url%'

    env(SENSOR_TYPES): '["https://uri.fiware.org/ns/data-models#humidity","https://uri.fiware.org/ns/data-models#temperature"]'
    sensorTypes: '%env(json:SENSOR_TYPES)%'

    app.path.cms_images: /uploads/cms/images
    app.cms.page.type.choices:
        'Onboarding guide': onboarding

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            $ngsiLdBrokerUrl: '%env(NGSI_LD_BROKER_URL)%'
            $experimentOptions:
                mercure:
                    publish_url: '%env(MERCURE_PUBLISH_URL)%'
            $sensorManagerOptions:
                types: '%sensorTypes%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\ExperimentListener:
        tags:
            -
                name: 'doctrine.event_listener'
                # this is the only required option for the lifecycle listener tag
                event: 'onFlush'
