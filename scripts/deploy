#!/usr/bin/env bash
set -o errexit -o errtrace -o noclobber -o nounset -o pipefail
IFS=$'\n\t'

dir=$(cd "$(dirname "${BASH_SOURCE[0]}")"/../ && pwd)
bold=$(tput bold)
normal=$(tput sgr0)

APP_ENV=${1:-prod}

cd "$dir"

echo "${bold}Installing asset build tools${normal}"
docker run --volume "${PWD}":/app --workdir /app node:latest yarn install

echo "${bold}Building assets${normal}"
docker run --volume "${PWD}":/app --workdir /app node:latest yarn build

echo "${bold}Bringing up Docker compose containers${normal}"
docker-compose up -d

echo "${bold}Composer installing${normal}"
if [ "prod" = "$APP_ENV" ]; then
    docker-compose exec -e APP_ENV phpfpm composer install --no-dev --classmap-authoritative
    docker-compose exec -e APP_ENV phpfpm composer dump-env prod
else
    [ -e .env.local.php ] && rm .env.local.php
    docker-compose exec -e APP_ENV phpfpm composer install
fi

echo "${bold}Clearing and warming up cache${normal}"
docker-compose exec -e APP_ENV phpfpm bin/console cache:clear --no-warmup
docker-compose exec -e APP_ENV phpfpm bin/console cache:warmup

docker-compose exec -e APP_ENV=prod phpfpm chown -R daemon /app/var

echo "${bold}Running migrations${normal}"
docker-compose exec -e APP_ENV phpfpm bin/console doctrine:migrations:migrate --no-interaction

# @TODO: There must be a better way to do this â€¦
docker-compose exec -e APP_ENV phpfpm chown -R daemon /app/var
